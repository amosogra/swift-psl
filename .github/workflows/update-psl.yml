name: Update Public Suffix List

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: "Custom commit message (optional)"
        required: false
        default: "chore: update Public Suffix List"
  schedule:
    # Run every day at 14:00 UTC
    - cron: "0 14 * * *"

jobs:
  update-psl:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This is necessary to fetch all tags

      - name: Run update-dependencies script
        id: update
        run: |
          # Run the update script
          ./update-dependencies.sh

          # Check if any files were modified
          git diff --name-only Sources/PublicSuffixList/Resources/ > /tmp/changed_files.txt
          if [ -s /tmp/changed_files.txt ]; then
            echo "PSL files were updated"
            echo "files_changed=true" >> $GITHUB_OUTPUT
            # Extract the PSL version
            PSL_VERSION=$(cat Sources/PublicSuffixList/Resources/version.txt | tr -d '\n')
            echo "psl_version=$PSL_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No files were changed"
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.update.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest tag and create new version
        if: steps.update.outputs.files_changed == 'true'
        id: tag_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Parse the version number
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment the minor version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"

          echo "New version will be: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.update.outputs.files_changed == 'true'
        run: |
          # Create temporary commit message file outside of the repository
          COMMIT_MSG_FILE=$(mktemp)

          # List changed files in the commit message
          echo "The following files were updated:" > $COMMIT_MSG_FILE
          cat /tmp/changed_files.txt >> $COMMIT_MSG_FILE

          # Only add the PSL resource files that were changed
          git add Sources/PublicSuffixList/Resources/

          # Use custom commit message if provided, otherwise use default
          if [ -n "${{ github.event.inputs.commit_message }}" ]; then
            git commit -m "${{ github.event.inputs.commit_message }}"
          else
            git commit -m "chore: update Public Suffix List to ${{ steps.update.outputs.psl_version }}"
          fi

          # Clean up
          rm -f $COMMIT_MSG_FILE /tmp/changed_files.txt

      - name: Push changes
        if: steps.update.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Create Tag
        if: steps.update.outputs.files_changed == 'true'
        run: |
          git tag ${{ steps.tag_version.outputs.new_version }}
          git push origin ${{ steps.tag_version.outputs.new_version }}

      - name: Create GitHub Release
        if: steps.update.outputs.files_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.new_version }}
          name: Release ${{ steps.tag_version.outputs.new_version }}
          body: |
            Public suffix list was updated to version ${{ steps.update.outputs.psl_version }}.
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          if [ "${{ steps.update.outputs.files_changed }}" == "true" ]; then
            echo "PSL files were updated and changes were committed"
            echo "New PSL version: ${{ steps.update.outputs.psl_version }}"
            echo "Created new release: ${{ steps.tag_version.outputs.new_version }}"
          else
            echo "No updates were necessary, PSL is already up to date"
          fi
